#!/usr/bin/env python3
#
# THIS FILE WAS AUTOMATICALLY GENERATED BY GRADERGEN
#

import math
from {gradergen_io_lib} import (open_to_read, read_variables, read_arrays,
                              assert_eof, open_to_write, write_variables,
                              write_arrays)

# Returns a dictionary containing all the variables/arrays contained
# in the input file.
# An error is raised if the input file was malformed (or nonexistent).
# If filename is not specified, the input is read from stdin.
def read_input(filename=None):
    f = open_to_read(filename)
    
    data = {{}}
{read_input}

    assert_eof(f)
    return data

# Writes the data dictionary in the proper format into the input file.
# If the filename is not specified, the input is printed to stdout.
def write_input(data, filename=None):
    f = open_to_write(filename)
    
{write_input}

# Fills the data dictionary with all the variables/arrays contained
# in the output file. The data dictionary must already contain all the variables
# contained in the input file as they might be necessary to parse the output.
# An error is raised if the output file was malformed (or nonexistent).
# If filename is not specified, the input is read from stdin.
def read_output(data, filename=None):
    f = open_to_read(filename)

{read_output}

    assert_eof(f)

# Writes the data dictionary in the proper format into the output file.
# If the filename is not specified, the output is printed to stdout.
def write_output(data, filename=None):
    f = open_to_write(filename)
    
{write_output}


# Returns a dictionary containing all the variables/arrays contained
# in the output file.
# The exit_function is called with score 0.0 and a proper error message if the
# output file was not existent or it was malformed.
# This function can be very useful to check the output generated by a
# contestant.
def correction_read_output(filename, exit_function):
    try:
        return read_output(filename)
    except FileNotFoundError:
        exit_function(0.0, "Input file not found.")
    except AssertionError:
        exit_function(0.0, "The input file was malformed.")
